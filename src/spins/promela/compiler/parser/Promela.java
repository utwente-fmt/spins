/* Generated By:JavaCC: Do not edit this line. Promela.java */
package spins.promela.compiler.parser;

import spins.promela.compiler.*;
import spins.promela.compiler.automaton.*;
import spins.promela.compiler.expression.*;
import spins.promela.compiler.variable.*;
import spins.promela.compiler.actions.*;
import java.io.*;
import java.util.*;
import static spins.promela.compiler.ltsmin.util.LTSminUtil.*;
import spins.promela.compiler.ltsmin.util.LTSminUtil;
import static spins.promela.compiler.parser.PromelaConstants.*;
@SuppressWarnings({"unused", "serial"})
public class Promela implements PromelaConstants {
        public static final String C_STATE_PROC_COUNTER = "_pc";
        public static final String C_STATE_PID = "_pid";

        public static final VariableType C_TYPE_PROC_COUNTER    = VariableType.PC;
        public static final VariableType C_TYPE_PID                     = VariableType.PID;

        /** Copy Constructors */
    public Promela(Promela prom, PromelaTokenManager tm) {
        this(tm);
        copy(this, prom);
    }

    public Promela(Specification spec, java.io.InputStream stream) {
        this(stream);
        specification = spec;
    }

        public Promela(Promela prom, java.io.InputStream stream) {
            this(stream);
            copy(this, prom);
        }

    private void copy(Promela dst, Promela src) {
        dst.currentProc = src.currentProc;
        dst.specification = src.specification;
        dst.automaton = src.automaton;
        dst.procNr = src.procNr;
        dst.labels = src.labels;
        dst.gotos = src.gotos;
        dst.type = src.type;
    }

        private Specification specification;
        private Proctype currentProc;
        private Automaton automaton;
        private int procNr = 0;
        private int unlessPriority = 0;
        private VariableType type;
        private boolean declarations;

        private Map<String, State> labels = new HashMap<String, State>();

        private Map<State, Token> gotos = new HashMap<State, Token>();

        public int getNextProcNr(int nrActive) {
                return procNr++;
        }

        private void setGotos() throws ParseException {
                for(State n : gotos.keySet()) {
                        Token t = gotos.get(n);
                        State ref = labels.get(t.image);
                        if(ref == null) {
                                throw new MyParseException("Could not find label: " + t.image, t);
                        }
                        new GotoTransition(n, ref, t.image);
                }
                gotos.clear();
                labels.clear();
        }

        public void addPID(Proctype p) {
                Variable pid = new Variable(C_TYPE_PID, C_STATE_PID, -1, p);
                p.addVariable(pid, false);
        }

        public void addPC(Proctype p) {
                Variable pc = new Variable(C_TYPE_PROC_COUNTER, C_STATE_PROC_COUNTER, -1, p);
                int initial_pc = (p.getNrActive() == 0 && !p.getName().equals("never") ? -1 : 0);
                try { pc.setInitExpr(new ConstantExpression(new Token(NUMBER, ""+initial_pc), initial_pc));
                } catch (ParseException e) { assert (false); }
                p.addVariable(pc, false);
        }

    Expression varref() throws ParseException { return varref(null); }

/* The specification itself */
  final public Specification spec(String name) throws ParseException {
        specification = new Specification(name);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCTYPE:
      case INIT:
      case NEVER:
      case TYPEDEF:
      case MTYPE:
      case BIT:
      case BOOL:
      case BYTE:
      case PID:
      case SHORT:
      case INT:
      case CHAN:
      case HIDDEN:
      case SHOW:
      case SEMICOLON:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      module();
    }
          {if (true) return specification;}
    throw new Error("Missing return statement in function");
  }

/* Each part in the specification is a called a module */
  final public void module() throws ParseException {
    if (jj_2_1(2)) {
      proctype();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEDEF:
      case MTYPE:
      case BIT:
      case BOOL:
      case BYTE:
      case PID:
      case SHORT:
      case INT:
      case CHAN:
      case HIDDEN:
      case SHOW:
      case IDENTIFIER:
        one_decl(specification.getVariableStore(), null, false);
        break;
      case INIT:
        init();
        break;
      case NEVER:
        never();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*** Here the different modules are defined ***/

/* Definition of a process */
  final public void proctype() throws ParseException {
        int nrActive = 0;
        Token n, id, b;
        State s;
        Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
               if (!id.image.equals("active"))
                   {if (true) throw new ParseException("Expected 'active' at line " + id.beginLine +", column "+ id.beginColumn);}
               nrActive = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        b = jj_consume_token(LBRACK);
        e = expr();
                   try {
                   nrActive = e.getConstantValue();
                   } catch (Exception pe) {
                       {if (true) throw new MyParseException("Proc requires a constant number of instances, not: "+ e, b);}
                   }
        jj_consume_token(RBRACK);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(PROCTYPE);
    id = jj_consume_token(IDENTIFIER);
                currentProc = new Proctype(specification, getNextProcNr(nrActive), nrActive, id.image);
                automaton = currentProc.getAutomaton();
                specification.addProc(currentProc);
        addPC(currentProc);
        addPID(currentProc);
        declarations = true;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEDEF:
    case MTYPE:
    case BIT:
    case BOOL:
    case BYTE:
    case PID:
    case SHORT:
    case INT:
    case CHAN:
    case HIDDEN:
    case SHOW:
    case IDENTIFIER:
      decl_list(currentProc);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                currentProc.lastArgument();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIORITY:
      priority();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROVIDED:
      enabler();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(LCURLY);
    s = sequence(currentProc.getStartState(), null, false);
    jj_consume_token(RCURLY);
                if(s != null) {
                        new EndTransition(s);
                }
                setGotos();
                currentProc = null;
  }

  final public void priority() throws ParseException {
        ConstantExpression c;
    jj_consume_token(PRIORITY);
    c = constant();
          currentProc.setPriority(c.getNumber());
  }

  final public void enabler() throws ParseException {
        Expression expr;
    jj_consume_token(PROVIDED);
    jj_consume_token(LPAREN);
    expr = expr();
    jj_consume_token(RPAREN);
          currentProc.setEnabler(expr);
  }

/* An init process */
  final public void init() throws ParseException {
        State s;
    jj_consume_token(INIT);
                currentProc = new Proctype(specification, getNextProcNr(1), 1, "init");
                automaton = currentProc.getAutomaton();
                specification.addProc(currentProc);
                currentProc.lastArgument();
        addPC(currentProc);
                addPID(currentProc);
                declarations = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIORITY:
      priority();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(LCURLY);
    s = sequence(currentProc.getStartState(), null, false);
    jj_consume_token(RCURLY);
                if(s != null) {
                        new EndTransition(s);
                }
                setGotos();
                currentProc = null;
  }

  final public void never() throws ParseException {
        State s;
    jj_consume_token(NEVER);
                currentProc = new Proctype(specification, -1, 0, "never"); // a never claim has no PID
                automaton = currentProc.getAutomaton();
                specification.setNever(currentProc);
                currentProc.lastArgument();
                addPC(currentProc);
                declarations = true;
    jj_consume_token(LCURLY);
    s = sequence(currentProc.getStartState(), null, false);
    jj_consume_token(RCURLY);
                if(s != null) {
                        new EndTransition(s);
                }
                setGotos();
                currentProc = null;
  }

/*** Here the declarations start ***/
  final public void decl_list(VariableContainer store) throws ParseException {
    one_decl(store, null, false);
    label_2:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(SEMICOLON);
      one_decl(store, null, false);
    }
  }

  final public State one_decl(VariableContainer store, State start, boolean inAtomic) throws ParseException {
    boolean hidden = false;
    State end = start;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDDEN:
      jj_consume_token(HIDDEN);
            hidden = true;
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHOW:
      jj_consume_token(SHOW);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEDEF:
      jj_consume_token(TYPEDEF);
      utype(hidden);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        utype(hidden);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_3(3)) {
        jj_consume_token(MTYPE);
        mtype(hidden);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          mtype(hidden);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MTYPE:
        case BIT:
        case BOOL:
        case BYTE:
        case PID:
        case SHORT:
        case INT:
        case CHAN:
        case IDENTIFIER:
          type = typename();
          if (type instanceof ChannelType) {
            ivar_chan(store, hidden);
            label_5:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[12] = jj_gen;
                break label_5;
              }
              jj_consume_token(COMMA);
              ivar_chan(store, hidden);
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              end = ivar(store, type, hidden, end, inAtomic);
              label_6:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  jj_la1[13] = jj_gen;
                  break label_6;
                }
                jj_consume_token(COMMA);
                end = ivar(store, type, hidden, end, inAtomic);
              }
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

  final public void utype(boolean hidden) throws ParseException {
    Token id;
    id = jj_consume_token(IDENTIFIER);
      CustomVariableType custom = specification.newCustomType(id.image); if (hidden) {if (true) throw new MyParseException("Cannot declare a custom variable type as hidden ", id);}
    jj_consume_token(LCURLY);
    decl_list(custom.getVariableStore());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(RCURLY);
  }

  final public void mtype(boolean hidden) throws ParseException {
    Token id, ref = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(LCURLY);
    id = jj_consume_token(IDENTIFIER);
         specification.addMType(id.image); if (hidden) {if (true) throw new MyParseException("Cannot declare an mtype as hidden ", id);}
    label_7:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
         specification.addMType(id.image);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(RCURLY);
  }

  final public State ivar(VariableContainer store, VariableType type, boolean hidden,
          State start, boolean inAtomic) throws ParseException {
        Token id, assign;
        State end = start;
        int arraySize = -1;
        Expression expr = null;
        ConstantExpression c = null;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      c = constant();
      jj_consume_token(RBRACK);
                                          arraySize = c.getNumber();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
          Variable var = new Variable(type, id.image, arraySize,currentProc); var.setHidden(hidden);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assign = jj_consume_token(ASSIGN);
      expr = lor_expr();
               if (declarations || start == null) {
                   var.setInitExpr(expr);
               } else {
               end = new State(automaton, inAtomic);
               Identifier ident = new Identifier(id, var, null);
               start.newTransition(new AssignAction(assign, ident, expr), end);
               }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
            if (store.getVariable(id.image) == null) {
               store.addVariable(var);
            } else { // could happen with inlines:
               String inProc = currentProc == null ? "" : " detected in "+ currentProc.getName();
               System.out.println("Warning: duplicate variable '"+ id.image +"'"+ inProc);
        }
        {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

  final public void ivar_chan(VariableContainer store, boolean hidden) throws ParseException {
        Token id, as;
        int arraySize = -1;
        ConstantExpression c = null;
        ChannelVariable var;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      c = constant();
      jj_consume_token(RBRACK);
                                          arraySize = c.getNumber();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                var = new ChannelVariable(id.image, arraySize, currentProc);
                var.setHidden(hidden);
                var.setOwner(currentProc);
                if (null != currentProc && currentProc.isArgument()) {
                        store.addVariable(var); // proc arguments can be uninitialized channels
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      as = jj_consume_token(ASSIGN);
      ch_init(as, store, var);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void ch_init(Token as, VariableContainer store, ChannelVariable var) throws ParseException {
        Expression size;
        VariableType type;
        ChannelType ctype;
        Token id;
        if (null != currentProc && currentProc.isArgument()) {
                throw new MyParseException("Illegal assignment to proc arguments.", as);
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
                var.setInitExpr(new Identifier(store.getVariable(id.image)));
                store.addVariable(var);
      break;
    case LBRACK:
      jj_consume_token(LBRACK);
      size = constant();
      jj_consume_token(RBRACK);
      jj_consume_token(OF);
       try {
            ctype = new ChannelType(size.getConstantValue());
        } catch (Exception e) {
            {if (true) throw new ParseException("The channel size expression '"+ size +"' is not a constant");}
        }
                var.setType(ctype);
      jj_consume_token(LCURLY);
      type = typename();
          ctype.addType(type);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        type = typename();
          ctype.addType(type);
      }
      jj_consume_token(RCURLY);
          store.addVariable(var);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public VariableType typename() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT:
      jj_consume_token(BIT);
                {if (true) return VariableType.BIT;}
      break;
    case BOOL:
      jj_consume_token(BOOL);
                 {if (true) return VariableType.BOOL;}
      break;
    case BYTE:
      jj_consume_token(BYTE);
                 {if (true) return VariableType.BYTE;}
      break;
    case PID:
      jj_consume_token(PID);
                {if (true) return VariableType.PID;}
      break;
    case SHORT:
      jj_consume_token(SHORT);
                  {if (true) return VariableType.SHORT;}
      break;
    case INT:
      jj_consume_token(INT);
                {if (true) return VariableType.INT;}
      break;
    case MTYPE:
      jj_consume_token(MTYPE);
                  {if (true) return VariableType.MTYPE;}
      break;
    case CHAN:
      jj_consume_token(CHAN);
                 {if (true) return ChannelType.UNASSIGNED_CHANNEL;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
        {if (true) return specification.getCustomType(t.image.trim());}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*** Here all the normal statements are defined ***/
  final public State sequence(State start, State breakNode, boolean inAtomic) throws ParseException {
        Expression expr;
        Token id, t;
        State end = start;
        State start1, end1;
        Transition trans;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case RARROW:
      delim();
      if (jj_2_5(1)) {
        end = sequence(end, breakNode, inAtomic);
      } else {
        ;
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      if (jj_2_28(2147483647)) {
        end = one_decl(currentProc, start, inAtomic);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
        case RARROW:
          delim();
          if (jj_2_6(1)) {
            end = sequence(end, breakNode, inAtomic);
          } else {
            ;
          }
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
      } else if (jj_2_29(1)) {
     declarations = false;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XR:
          jj_consume_token(XR);
          expr = varref();
          currentProc.addXR((Identifier)expr);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[28] = jj_gen;
              break label_9;
            }
            jj_consume_token(COMMA);
            expr = varref();
                                 currentProc.addXR((Identifier)expr);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
          case RARROW:
            delim();
            if (jj_2_7(1)) {
              end = sequence(end, breakNode, inAtomic);
            } else {
              ;
            }
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          break;
        case XS:
          jj_consume_token(XS);
          expr = varref();
          currentProc.addXS((Identifier)expr);
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[30] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            expr = varref();
                                 currentProc.addXS((Identifier)expr);
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
          case RARROW:
            delim();
            if (jj_2_8(1)) {
              end = sequence(end, breakNode, inAtomic);
            } else {
              ;
            }
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          break;
        case FOR:
          jj_consume_token(FOR);
        ConstantExpression b, e;
          jj_consume_token(LPAREN);
          expr = varref();
          jj_consume_token(COLON);
          b = onlyconstant();
          jj_consume_token(DOT);
          jj_consume_token(DOT);
          e = onlyconstant();
          jj_consume_token(RPAREN);
        end = new State(automaton, inAtomic);
        start.newTransition(LTSminUtil.assign((Identifier)expr, b), end);
        start1 = end;
          jj_consume_token(LCURLY);
          end = sequence(end, breakNode, inAtomic);
          jj_consume_token(RCURLY);
        trans = end.newTransition(new ExprAction(compare(LT, expr, e)), start1);
        trans.addAction( incr((Identifier)expr) );

        end1 = end;
        end = new State(automaton, inAtomic);
        end1.newTransition(new ExprAction(compare(GTE, expr, e)), end);
          if (jj_2_9(1)) {
            end = sequence(end, breakNode, inAtomic);
          } else {
            ;
          }
          break;
        case IF:
          jj_consume_token(IF);
          end = new State(automaton, inAtomic);
          label_11:
          while (true) {
            option(start, end, breakNode, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_11;
            }
          }
          jj_consume_token(FI);
          if (jj_2_10(1)) {
            end = sequence(end, breakNode, inAtomic);
          } else {
            ;
          }
          break;
        case DO:
          jj_consume_token(DO);
          end = new State(automaton, inAtomic);
          label_12:
          while (true) {
            option(start, start, end, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[33] = jj_gen;
              break label_12;
            }
          }
          jj_consume_token(OD);
          if (jj_2_11(1)) {
            end = sequence(end, breakNode, inAtomic);
          } else {
            ;
          }
          break;
        default:
          jj_la1[42] = jj_gen;
          if (jj_2_24(2147483647)) {
            id = jj_consume_token(IDENTIFIER);
            jj_consume_token(COLON);
        String label = id.image +"_"+ Preprocessor.getLevel();
                if(labels.containsKey(label)) {
                        {if (true) throw new MyParseException("Duplicate label: "+ id.image, id);}
                }
                labels.put(label, start);
                start.addLabel(label);
            if (jj_2_12(1)) {
              end = sequence(end, breakNode, inAtomic);
            } else {
              ;
            }
          } else if (jj_2_25(2147483647)) {
            end = channel_statement(start, breakNode, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              if (jj_2_13(1)) {
                end = sequence(end, breakNode, inAtomic);
              } else {
                ;
              }
              break;
            default:
              jj_la1[34] = jj_gen;
              ;
            }
          } else if (jj_2_26(2147483647)) {
            end = assign(start, breakNode, inAtomic);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              if (jj_2_14(1)) {
                end = sequence(end, breakNode, inAtomic);
              } else {
                ;
              }
              break;
            default:
              jj_la1[35] = jj_gen;
              ;
            }
          } else if (jj_2_27(1)) {
            expr = expr();
                end = new State(automaton, inAtomic);
                start.newTransition(new ExprAction(expr), end);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              if (jj_2_15(1)) {
                end = sequence(end, breakNode, inAtomic);
              } else {
                ;
              }
              break;
            default:
              jj_la1[36] = jj_gen;
              ;
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ELSE:
              t = jj_consume_token(ELSE);
                end = new State(automaton, inAtomic);
                //start.newTransition(new ElseAction(t), end);
                new ElseTransition(start, end);
              if (jj_2_16(1)) {
                end = sequence(end, breakNode, inAtomic);
              } else {
                ;
              }
              break;
            case GOTO:
              t = jj_consume_token(GOTO);
              id = jj_consume_token(IDENTIFIER);
        String label = id.image +"_"+ Preprocessor.getLevel();
        Token tok = new Token(IDENTIFIER, label);
        tok.beginLine = id.beginLine;
        tok.endLine = id.endLine;
        tok.beginColumn = id.beginColumn;
        tok.endColumn = id.endColumn;
                gotos.put(start, tok);
                end = new State(automaton, inAtomic);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_17(1)) {
                  end = sequence(end, breakNode, inAtomic);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[37] = jj_gen;
                ;
              }
              break;
            case PRINT:
              t = jj_consume_token(PRINT);
              jj_consume_token(LPAREN);
              id = jj_consume_token(STRING);
          PrintAction pa = new PrintAction(t, id.image);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                arg_lst(pa);
                break;
              default:
                jj_la1[38] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
                end = new State(automaton, inAtomic);
                start.newTransition(pa, end);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_18(1)) {
                  end = sequence(end, breakNode, inAtomic);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[39] = jj_gen;
                ;
              }
              break;
            case ASSERT:
              t = jj_consume_token(ASSERT);
              expr = expr();
                end = new State(automaton, inAtomic);
                start.newTransition(new AssertAction(t, expr), end);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_19(1)) {
                  end = sequence(end, breakNode, inAtomic);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[40] = jj_gen;
                ;
              }
              break;
            case BREAK:
              t = jj_consume_token(BREAK);
                if(breakNode == null) {
                        {if (true) throw new MyParseException("Breakstatement found without a do-loop to break out of!", t);}
                }
                new GotoTransition(start, breakNode, "break");
                end = new State(automaton, inAtomic);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_20(1)) {
                  end = sequence(end, breakNode, inAtomic);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[41] = jj_gen;
                ;
              }
              break;
            case ATOMIC:
              t = jj_consume_token(ATOMIC);
                end = new State(automaton, true);
                new UselessTransition(start, end, "ATOMIC");
              jj_consume_token(LCURLY);
              end = sequence(end, breakNode, true);
              jj_consume_token(RCURLY);
                end.setInAtomic(false);
              if (jj_2_21(1)) {
                end = sequence(end, breakNode, inAtomic);
              } else {
                ;
              }
              break;
            case D_STEP:
              t = jj_consume_token(D_STEP);
                end = new State(automaton, inAtomic);
                trans = start.newTransition(end);
              jj_consume_token(LCURLY);
              dstep_sequence(trans, null);
              jj_consume_token(RCURLY);
              if (jj_2_22(1)) {
                end = sequence(end, breakNode, inAtomic);
              } else {
                ;
              }
              break;
            case LCURLY:
              jj_consume_token(LCURLY);
              end = sequence(start, breakNode, inAtomic);
              jj_consume_token(RCURLY);
              if (jj_2_23(1)) {
                end = sequence(end, breakNode, inAtomic);
              } else {
                ;
              }
              break;
            default:
              jj_la1[43] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_30(2147483647)) {
      jj_consume_token(UNLESS);
        start1 = new State(automaton, inAtomic);
      end1 = sequence(start1, breakNode, inAtomic);
        for (Transition tr : end1.input) {
            tr.changeTo(end);
        }
        end1.delete();
        automaton.addUnless(start, end, start1, unlessPriority++);
    } else {
      ;
    }
          {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

  final public void delim() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case RARROW:
      jj_consume_token(RARROW);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void option(State start, State end, State breakNode, boolean inAtomic) throws ParseException {
        State tempEnd;
    jj_consume_token(OPTION);
                State s = new State(automaton, inAtomic);
                new UselessTransition(start, s, "OPTION");
    tempEnd = sequence(s, breakNode, inAtomic);
          if(tempEnd != null) end.merge(tempEnd);
  }

  final public State channel_statement(State start, State breakNode, boolean inAtomic) throws ParseException {
        Expression expr;
        Token t;
        State end = new State(automaton, inAtomic);
    expr = varref();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LNOT:
      t = jj_consume_token(LNOT);
                ChannelSendAction send = new ChannelSendAction(t, (Identifier)expr);
                start.newTransition(send, end);
      send_args(send);
      break;
    case CH_SEND_SORTED:
      t = jj_consume_token(CH_SEND_SORTED);
        ChannelSendAction send2 = new ChannelSendAction(t, (Identifier)expr, true);
        start.newTransition(send2, end);
      send_args(send2);
      break;
    case CH_READ:
      t = jj_consume_token(CH_READ);
      if (jj_2_31(1)) {
                  ChannelReadAction read = new ChannelReadAction(t, (Identifier)expr, false, false);
                  start.newTransition(read, end);
        recv_args(read);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
                  ChannelReadAction read2 = new ChannelReadAction(t, (Identifier)expr, true, false);
          start.newTransition(read2, end);
          jj_consume_token(LT);
          recv_args(read2);
          jj_consume_token(GT);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case CH_READ_RAND:
      t = jj_consume_token(CH_READ_RAND);
      if (jj_2_32(1)) {
          ChannelReadAction read3 = new ChannelReadAction(t, (Identifier)expr, false, true);
          start.newTransition(read3, end);
        recv_args(read3);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          ChannelReadAction read4 = new ChannelReadAction(t, (Identifier)expr, true, true);
          start.newTransition(read4, end);
          jj_consume_token(LT);
          recv_args(read4);
          jj_consume_token(GT);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

  final public State assign(State start, State breakNode, boolean inAtomic) throws ParseException {
        Identifier id;
        Expression expr;
        Token t;
        State end = new State(automaton, inAtomic);
    expr = varref();
                try {
                        id = (Identifier)expr;
                } catch(ClassCastException ex) {
                        {if (true) throw new MyParseException("Not a valid identifier on the left side of the assignment", expr.getToken());}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      expr = lor_expr();
            start.newTransition(new AssignAction(t, id, expr), end);
      break;
    case INCR:
      t = jj_consume_token(INCR);
            start.newTransition(new AssignAction(t, id), end);
      break;
    case DECR:
      t = jj_consume_token(DECR);
            start.newTransition(new AssignAction(t, id), end);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return end;}
    throw new Error("Missing return statement in function");
  }

/*** Special dstep statement parsing ***/
  final public void dstep_sequence(ActionContainer cont, OptionAction loop) throws ParseException {
        Token t, id;
        Expression expr;
        OptionAction opt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case RARROW:
      delim();
      if (jj_2_33(1)) {
        dstep_sequence(cont, loop);
      } else {
        ;
      }
      break;
    default:
      jj_la1[63] = jj_gen;
      if (jj_2_48(2147483647)) {
          {if (true) throw new ParseException("Variables can not be declared inside a d_step");}
        one_decl(null, null, false);
        delim();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XR:
        case XS:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case XR:
            t = jj_consume_token(XR);
            break;
          case XS:
            t = jj_consume_token(XS);
            break;
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          expr = varref();
          {if (true) throw new MyParseException("Can not declare exclusive reads or writes in a d_step", t);}
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[51] = jj_gen;
              break label_13;
            }
            jj_consume_token(COMMA);
            expr = varref();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
          case RARROW:
            delim();
            if (jj_2_34(1)) {
              dstep_sequence(cont, loop);
            } else {
              ;
            }
            break;
          default:
            jj_la1[52] = jj_gen;
            ;
          }
          break;
        case IF:
          t = jj_consume_token(IF);
          opt = new OptionAction(t, false); cont.addAction(opt);
          label_14:
          while (true) {
            dstep_option(opt, loop);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[53] = jj_gen;
              break label_14;
            }
          }
          jj_consume_token(FI);
          if (jj_2_35(1)) {
            dstep_sequence(cont, loop);
          } else {
            ;
          }
          break;
        case DO:
          t = jj_consume_token(DO);
          opt = new OptionAction(t, true); cont.addAction(opt);
          label_15:
          while (true) {
            dstep_option(opt, opt);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPTION:
              ;
              break;
            default:
              jj_la1[54] = jj_gen;
              break label_15;
            }
          }
          jj_consume_token(OD);
          if (jj_2_36(1)) {
            dstep_sequence(cont, loop);
                                       opt.hasSuccessor(true);
          } else {
            ;
          }
          break;
        default:
          jj_la1[64] = jj_gen;
          if (jj_2_49(2147483647)) {
            id = jj_consume_token(IDENTIFIER);
            jj_consume_token(COLON);
      cont.addAction(new LabelAction(id, id.image));
            dstep_sequence(cont, loop);
          } else if (jj_2_50(2147483647)) {
            dstep_channel_statement(cont);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              if (jj_2_37(1)) {
                dstep_sequence(cont, loop);
              } else {
                ;
              }
              break;
            default:
              jj_la1[55] = jj_gen;
              ;
            }
          } else if (jj_2_51(2147483647)) {
            dstep_assign(cont);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              if (jj_2_38(1)) {
                dstep_sequence(cont, loop);
              } else {
                ;
              }
              break;
            default:
              jj_la1[56] = jj_gen;
              ;
            }
          } else if (jj_2_52(1)) {
            expr = expr();
          cont.addAction(new ExprAction(expr));
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
            case RARROW:
              delim();
              if (jj_2_39(1)) {
                dstep_sequence(cont, loop);
              } else {
                ;
              }
              break;
            default:
              jj_la1[57] = jj_gen;
              ;
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ELSE:
              t = jj_consume_token(ELSE);
          cont.addAction(new ElseAction(t));
              if (jj_2_40(1)) {
                dstep_sequence(cont, loop);
              } else {
                ;
              }
              break;
            case GOTO:
              t = jj_consume_token(GOTO);
              id = jj_consume_token(IDENTIFIER);
      cont.addAction(new GotoAction(t, id.image));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_41(1)) {
                  dstep_sequence(cont, loop);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[58] = jj_gen;
                ;
              }
              break;
            case PRINT:
              t = jj_consume_token(PRINT);
              jj_consume_token(LPAREN);
              id = jj_consume_token(STRING);
          PrintAction pa = new PrintAction(t, id.image);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                jj_consume_token(COMMA);
                arg_lst(pa);
                break;
              default:
                jj_la1[59] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
          cont.addAction(pa);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_42(1)) {
                  dstep_sequence(cont, loop);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[60] = jj_gen;
                ;
              }
              break;
            case ASSERT:
              t = jj_consume_token(ASSERT);
              expr = expr();
          cont.addAction(new AssertAction(t, expr));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_43(1)) {
                  dstep_sequence(cont, loop);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[61] = jj_gen;
                ;
              }
              break;
            case BREAK:
              t = jj_consume_token(BREAK);
        if(loop == null)
            {if (true) throw new MyParseException("Breakstatement found without a do-loop to break out of!", t);}
        cont.addAction(new BreakAction(t, loop));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
              case RARROW:
                delim();
                if (jj_2_44(1)) {
                  dstep_sequence(cont, loop);
                } else {
                  ;
                }
                break;
              default:
                jj_la1[62] = jj_gen;
                ;
              }
              break;
            case ATOMIC:
              t = jj_consume_token(ATOMIC);
              jj_consume_token(LCURLY);
              dstep_sequence(cont, loop);
              jj_consume_token(RCURLY);
              if (jj_2_45(1)) {
                dstep_sequence(cont, loop);
              } else {
                ;
              }
              break;
            case D_STEP:
              t = jj_consume_token(D_STEP);
              jj_consume_token(LCURLY);
              dstep_sequence(cont, loop);
              jj_consume_token(RCURLY);
              if (jj_2_46(1)) {
                dstep_sequence(cont, loop);
              } else {
                ;
              }
              break;
            case LCURLY:
              jj_consume_token(LCURLY);
              dstep_sequence(cont, loop);
              jj_consume_token(RCURLY);
              if (jj_2_47(1)) {
                dstep_sequence(cont, loop);
              } else {
                ;
              }
              break;
            default:
              jj_la1[65] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void dstep_option(OptionAction opt, OptionAction loop) throws ParseException {
        Sequence seq;
    jj_consume_token(OPTION);
          seq = opt.startNewOption();
    dstep_sequence(seq, loop);
  }

  final public void dstep_channel_statement(ActionContainer cont) throws ParseException {
        Token t;
    Expression expr;
    expr = varref();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LNOT:
      t = jj_consume_token(LNOT);
        ChannelSendAction send = new ChannelSendAction(t, (Identifier)expr);
        cont.addAction(send);
      send_args(send);
      break;
    case CH_SEND_SORTED:
      t = jj_consume_token(CH_SEND_SORTED);
        {if (true) throw new MyParseException("Sorted send is not yet supported!", t);}
      send_args(null);
      break;
    case CH_READ:
      t = jj_consume_token(CH_READ);
      if (jj_2_53(1)) {
          ChannelReadAction read = new ChannelReadAction(t, (Identifier)expr);
          cont.addAction(read);
        recv_args(read);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          ChannelReadAction read2 = new ChannelReadAction(t, (Identifier)expr, true, false);
          cont.addAction(read2);
          jj_consume_token(LT);
          recv_args(read2);
          jj_consume_token(GT);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case CH_READ_RAND:
      t = jj_consume_token(CH_READ_RAND);
      if (jj_2_54(1)) {
          ChannelReadAction read3 = new ChannelReadAction(t, (Identifier)expr, false, true);
          cont.addAction(read3);
        recv_args(read3);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          ChannelReadAction read4 = new ChannelReadAction(t, (Identifier)expr, false, true);
          cont.addAction(read4);
          jj_consume_token(LT);
          recv_args(null);
          jj_consume_token(GT);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void dstep_assign(ActionContainer cont) throws ParseException {
        Identifier id;
        Expression expr;
        Token t;
    expr = varref();
                try {
                        id = (Identifier)expr;
                } catch(ClassCastException ex) {
                        {if (true) throw new MyParseException("Not a valid identifier on the left side of the assignment", expr.getToken());}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      expr = lor_expr();
                cont.addAction(new AssignAction(t, id, expr));
      break;
    case INCR:
      t = jj_consume_token(INCR);
                cont.addAction(new AssignAction(t, id, null));
      break;
    case DECR:
      t = jj_consume_token(DECR);
                cont.addAction(new AssignAction(t, id, null));
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*** Arguments parsing ***/
  final public void send_args(CompoundExpression c) throws ParseException {
        Expression expr;
    if (jj_2_55(2147483647)) {
      expr = lor_expr();
          c.addExpression(expr);
      jj_consume_token(LPAREN);
      arg_lst(c);
      jj_consume_token(RPAREN);
    } else {
      arg_lst(c);
    }
  }

  final public void recv_args(CompoundExpression c) throws ParseException {
    if (jj_2_56(1)) {
      recv_arg(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case COMMA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          recv_args(c);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          recv_args(c);
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        recv_args(c);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void recv_arg(CompoundExpression c) throws ParseException {
        Token t;
        Expression expr;
    if (jj_2_57(1)) {
      expr = varref();
          c.addExpression(expr);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVAL:
        t = jj_consume_token(EVAL);
        jj_consume_token(LPAREN);
        expr = varref();
        jj_consume_token(RPAREN);
          c.addExpression(new EvalExpression(t, expr));
        break;
      case TRUE:
      case FALSE:
      case SKIP_:
      case NUMBER:
        expr = onlyconstant();
          c.addExpression(expr);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void arg_lst(CompoundExpression expr) throws ParseException {
        Expression ex1;
    if (jj_2_58(1)) {
      ex1 = lor_expr();
          expr.addExpression(ex1);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        ex1 = lor_expr();
          expr.addExpression(ex1);
      }
    } else {
      ;
    }
  }

/*** All expression statements ***/
  final public Expression varref(Identifier context) throws ParseException {
        Token id, proc, dot = null;
        Expression expr = null;
        Expression expr2 = null;
        Identifier ident;
        Variable var = null;
    if (getToken(1).kind == IDENTIFIER &&
                     specification.getProcess(getToken(1).image) != null) {
      proc = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        expr = lor_expr();
        jj_consume_token(RBRACK);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      dot = jj_consume_token(COLON);
        if (currentProc != specification.getNever())
            {if (true) throw new MyParseException("Remote variable references only allowed in never claim", dot);}
        Proctype old = currentProc;
        currentProc = specification.getProcess(proc.image);
        Expression ex = varref(null);
        currentProc = old;

        if (ex instanceof Identifier) {
           ident = (Identifier) ex;
           int index = 0;
           if (expr != null) {
               try {
                 index = expr.getConstantValue();
               } catch (Exception e) {
                    {if (true) throw new MyParseException("Only constants supported in remote variable references", dot);}
               }
           }
           ident.setInstanceIndex(index);
        }
        {if (true) return ex;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        id = jj_consume_token(IDENTIFIER);
                int mtypeNr = specification.getMType(id.image);
                if(mtypeNr > 0) {
                        {if (true) return new MTypeReference(id, mtypeNr);}
                }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          jj_consume_token(LBRACK);
          expr = lor_expr();
          jj_consume_token(RBRACK);
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
                if (null == context) {
                        if (currentProc != null) {
                var = currentProc.getVariable(id.image);
                        }
                        if (var == null) {
                                var = specification.getVariableStore().getVariable(id.image);
                        }
                        if (var == null) {
                   {if (true) throw new MyParseException("Undeclared identifier: " + id.image, id);}
                }
                ident = new Identifier(id, var, expr, null);
            } else {
               CustomVariableType cvt;
            try {
                cvt = (CustomVariableType)context.getVariable().getType();
            } catch (ClassCastException cce) {
                {if (true) throw new MyParseException("Variable is not a struct " + context, context.getToken());}
            }
            var = cvt.getVariableStore().getVariable(id.image);
            if (var == null) {
                {if (true) throw new MyParseException("Struct "+ cvt +" has no member " + id.image, id);}
            }
            ident = new Identifier(id, var, expr, null);
            }
        if ((null == expr) != (-1 == ident.getVariable().getArraySize())) {
            {if (true) throw new MyParseException("Invalid array semantics in expression: "+ id, id);}
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          dot = jj_consume_token(DOT);
          expr2 = varref(ident);
                if (!(expr2 instanceof Identifier))
                    {if (true) throw new MyParseException("Not an identifier: " + expr2, dot);}
                    ident.setSub((Identifier)expr2);
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
          {if (true) return ident;}
        break;
      case VAR_PID:
        id = jj_consume_token(VAR_PID);
          {if (true) return new Identifier(id, currentProc.getVariable(id.image), null, null);}
        break;
      case VAR_NR_PR:
        id = jj_consume_token(VAR_NR_PR);
      {if (true) return new Identifier(id, specification.getVariableStore().getVariable(id.image), null, null);}
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression base_expr() throws ParseException {
        Expression ex1 = null, ex2, ex3;
        Token t, id, id2;
    if (jj_2_59(2147483647)) {
      jj_consume_token(LPAREN);
      ex1 = lor_expr();
      t = jj_consume_token(RARROW);
      ex2 = lor_expr();
      jj_consume_token(COLON);
      ex3 = lor_expr();
      jj_consume_token(RPAREN);
          {if (true) return new AritmicExpression(t, ex1, ex2, ex3);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        ex1 = expr();
        jj_consume_token(RPAREN);
          {if (true) return ex1;}
        break;
      case LEN:
        t = jj_consume_token(LEN);
        jj_consume_token(LPAREN);
        ex1 = varref();
        jj_consume_token(RPAREN);
          {if (true) return new ChannelLengthExpression(t, ex1);}
        break;
      default:
        jj_la1[82] = jj_gen;
        if (jj_2_60(2147483647)) {
          id = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACK:
            jj_consume_token(LBRACK);
            ex1 = lor_expr();
            jj_consume_token(RBRACK);
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          jj_consume_token(AT);
          id2 = jj_consume_token(IDENTIFIER);
          {if (true) return new RemoteRef(id, id2, ex1);}
        } else if (jj_2_61(1)) {
          ex1 = varref();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CH_READ:
          case CH_READ_RAND:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CH_READ:
              t = jj_consume_token(CH_READ);
               ChannelReadExpression read = new ChannelReadExpression(t, (Identifier)ex1, false);
              jj_consume_token(LBRACK);
              recv_args(read);
              jj_consume_token(RBRACK);
             {if (true) return read;}
              break;
            case CH_READ_RAND:
              t = jj_consume_token(CH_READ_RAND);
               ChannelReadExpression read2 = new ChannelReadExpression(t, (Identifier)ex1, true);
              jj_consume_token(LBRACK);
              recv_args(read2);
              jj_consume_token(RBRACK);
             {if (true) return read2;}
              break;
            default:
              jj_la1[80] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[81] = jj_gen;
            ;
          }
          {if (true) return ex1;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
          case SKIP_:
          case NUMBER:
            ex1 = onlyconstant();
          {if (true) return ex1;}
            break;
          case TIMEOUT:
            t = jj_consume_token(TIMEOUT);
          {if (true) return new TimeoutExpression(t);}
            break;
          case NP_:
            t = jj_consume_token(NP_);
          {if (true) throw new MyParseException("np_ expressions are not yet supported!", t);}
            break;
          case ENABLED:
            t = jj_consume_token(ENABLED);
            jj_consume_token(LPAREN);
            lor_expr();
            jj_consume_token(RPAREN);
          {if (true) throw new MyParseException("enabled expressions are not yet supported!", t);}
            break;
          case PC_VALUE:
            t = jj_consume_token(PC_VALUE);
            jj_consume_token(LPAREN);
            lor_expr();
            jj_consume_token(RPAREN);
          {if (true) throw new MyParseException("pc_value expressions are not yet supported!", t);}
            break;
          case RUN:
            t = jj_consume_token(RUN);
            id = jj_consume_token(IDENTIFIER);
          RunExpression runExpr = new RunExpression(t, id.image);
            jj_consume_token(LPAREN);
            arg_lst(runExpr);
            jj_consume_token(RPAREN);
          {if (true) return runExpr;}
            break;
          case FULL:
          case EMPTY:
          case NFULL:
          case NEMPTY:
            t = chanop();
            jj_consume_token(LPAREN);
            ex1 = varref();
            jj_consume_token(RPAREN);
          {if (true) return new ChannelOperation(t, ex1);}
            break;
          default:
            jj_la1[83] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression unary_expr() throws ParseException {
        Expression ex1;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BNOT:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BNOT:
        t = jj_consume_token(BNOT);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex1 = unary_expr();
          {if (true) return new AritmicExpression(t, ex1);}
      break;
    case LNOT:
      t = jj_consume_token(LNOT);
      ex1 = unary_expr();
          {if (true) return new BooleanExpression(t, ex1);}
      break;
    default:
      jj_la1[85] = jj_gen;
      if (jj_2_62(1)) {
        ex1 = base_expr();
          {if (true) return ex1;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression mul_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = unary_expr();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        t = jj_consume_token(TIMES);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case MODULO:
        t = jj_consume_token(MODULO);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = unary_expr();
            ex1 = new AritmicExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression add_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = mul_expr();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = mul_expr();
            ex1 = new AritmicExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression shift_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = add_expr();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSHIFT:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case RSHIFT:
        t = jj_consume_token(RSHIFT);
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = add_expr();
            ex1 = new AritmicExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression cmp_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = shift_expr();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LTE:
      case GT:
      case GTE:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LTE:
        t = jj_consume_token(LTE);
        break;
      case GTE:
        t = jj_consume_token(GTE);
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = shift_expr();
            ex1 = new CompareExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression eq_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = cmp_expr();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NEQ:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NEQ:
        t = jj_consume_token(NEQ);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ex2 = cmp_expr();
            ex1 = new CompareExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression and_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = eq_expr();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAND:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_22;
      }
      t = jj_consume_token(BAND);
      ex2 = eq_expr();
            ex1 = new AritmicExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression xor_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = and_expr();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_23;
      }
      t = jj_consume_token(XOR);
      ex2 = and_expr();
            ex1 = new AritmicExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression or_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = xor_expr();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOR:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_24;
      }
      t = jj_consume_token(BOR);
      ex2 = xor_expr();
            ex1 = new AritmicExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression land_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = or_expr();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAND:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_25;
      }
      t = jj_consume_token(LAND);
      ex2 = or_expr();
            ex1 = new BooleanExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression lor_expr() throws ParseException {
        Expression ex1, ex2;
        Token t;
    ex1 = land_expr();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOR:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_26;
      }
      t = jj_consume_token(LOR);
      ex2 = land_expr();
            ex1 = new BooleanExpression(t, ex1, ex2);
    }
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expr() throws ParseException {
        Expression ex1;
    ex1 = lor_expr();
          {if (true) return ex1;}
    throw new Error("Missing return statement in function");
  }

  final public Token chanop() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FULL:
      t = jj_consume_token(FULL);
      break;
    case NFULL:
      t = jj_consume_token(NFULL);
      break;
    case EMPTY:
      t = jj_consume_token(EMPTY);
      break;
    case NEMPTY:
      t = jj_consume_token(NEMPTY);
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ConstantExpression onlyconstant() throws ParseException {
    Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n = jj_consume_token(TRUE);
      {if (true) return new ConstantExpression(n, 1);}
      break;
    case FALSE:
      n = jj_consume_token(FALSE);
      {if (true) return new ConstantExpression(n, 0);}
      break;
    case SKIP_:
      n = jj_consume_token(SKIP_);
      {if (true) return new ConstantExpression(n, 1);}
      break;
    case NUMBER:
      n = jj_consume_token(NUMBER);
      {if (true) return new ConstantExpression(n, Integer.parseInt(n.image));}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ConstantExpression constant() throws ParseException {
        Token n;
        ConstantExpression ex1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case SKIP_:
    case NUMBER:
      ex1 = onlyconstant();
      {if (true) return ex1;}
      break;
    case IDENTIFIER:
      n = jj_consume_token(IDENTIFIER);
        int mtypeNr = specification.getMType(n.image);
        if(mtypeNr > 0)
            {if (true) return new MTypeReference(n, mtypeNr);}
        {if (true) throw new MyParseException("Expected constant!", n);}
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(EVAL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(XS)) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_132()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_132()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(XR)) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_178()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(CHAN)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(MTYPE)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(PID)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(BIT)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_182()) return true;
    if (jj_scan_token(RBRACK)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(CH_READ_RAND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(CH_READ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(CH_SEND_SORTED)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_182()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(OPTION)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(SKIP_)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(D_STEP)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(ATOMIC)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_182()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_194()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(BOR)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(61)) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(DO)) return true;
    Token xsp;
    if (jj_3R_188()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(OD)) return true;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    if (jj_3R_187()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FI)) return true;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_146()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    if (jj_3R_56()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_28()) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(BAND)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = type instanceof ChannelType;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_197()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(MTYPE)) return true;
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(TYPEDEF)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(HIDDEN)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    }
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_210()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_212()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(CH_READ_RAND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_214()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(CH_READ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(CH_SEND_SORTED)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_133()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(RUN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_178()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(PC_VALUE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(ENABLED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(OPTION)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(NP_)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(TIMEOUT)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(CH_READ_RAND)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(CH_READ)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(UNLESS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RARROW)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(LEN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(UNLESS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RARROW)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(PROCTYPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(D_STEP)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(VAR_PID)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(VAR_NR_PR)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(ATOMIC)) return true;
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER &&
                 specification.getProcess(getToken(1).image) != null;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(DO)) return true;
    Token xsp;
    if (jj_3R_158()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(OD)) return true;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    if (jj_3R_157()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FI)) return true;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_132()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PromelaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[104];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x67fce,0x67fcc,0x0,0x0,0x67fc0,0x8000,0x10000,0x8000,0x20000,0x40000,0x0,0x0,0x0,0x0,0x0,0x40,0x7f80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5980000,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5180000,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10000000,0x10000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x20000000,0x20000000,0x0,0x0,0x0,0x10000000,0x200000,0x20000000,0x1000000,0x200000,0x1000000,0x200000,0x20000000,0x1000000,0x0,0x50000000,0x20000000,0x50000000,0x20000000,0x50000000,0x4000000,0x4000000,0x50000000,0x50000000,0x50000000,0x50000000,0x20000000,0x50000000,0x50000000,0x50000000,0x0,0x80007,0x50000000,0x50000000,0x0,0x0,0x80000000,0x200000,0x0,0x20000000,0x50000000,0x4000000,0x4000000,0x50000000,0x50000000,0x50000000,0x50000000,0x20000000,0x50000000,0x50000000,0x50000000,0x50000000,0x0,0x80007,0x0,0x0,0x80000000,0x200000,0x20400000,0x20400000,0x400000,0xe000,0x20000000,0x1000000,0x1000000,0x0,0x60000,0x1000000,0x0,0x0,0x400008,0xfff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e00,0xe000,0xe000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x13,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x13,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x3,0x3,0x0,0x0,0x28,0x38,0x1c0,0x1c0,0x220,0x220,0xc00,0xc00,0xf000,0xf000,0x30000,0x30000,0x40000,0x80000,0x100000,0x200000,0x400000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x8,0x8,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x18,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[62];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Promela(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Promela(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PromelaTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Promela(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PromelaTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Promela(PromelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PromelaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[217];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 104; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 217; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 62; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
